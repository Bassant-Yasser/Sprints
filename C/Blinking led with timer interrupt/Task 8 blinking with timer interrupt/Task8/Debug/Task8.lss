
Task8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000081c  000008b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  000008b8  2**0
                  ALLOC
  3 .stab         00000c48  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b24  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_3>
  10:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_6>
  1c:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_7>
  20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_8>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0c 04 	jmp	0x818	; 0x818 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

/* global variable contain the ticks count of the timer */
unsigned char g_tick = 0;

int main()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the led pin as output pin. */
	PORTC_DIR  |= (1<<P0);
  a6:	a4 e3       	ldi	r26, 0x34	; 52
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	8c 93       	st	X, r24

	/* LED is off at the beginning (Positive Logic). */
	PORTC_OUT &= ~(1<<P0);
  b4:	a5 e3       	ldi	r26, 0x35	; 53
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e5 e3       	ldi	r30, 0x35	; 53
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	8c 93       	st	X, r24

	/* Enable global interrupts in MC. */
	SREG  |= (1<<7);
  c2:	af e5       	ldi	r26, 0x5F	; 95
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ef e5       	ldi	r30, 0x5F	; 95
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	8c 93       	st	X, r24

	/* Create configuration structure for Timer driver */
	Timer_ConfigType Config_Ptr = {COMPARE, 0, F_CPU_1024, 100, Timer0};
  d0:	ce 01       	movw	r24, r28
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	99 87       	std	Y+9, r25	; 0x09
  d6:	88 87       	std	Y+8, r24	; 0x08
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	fb 87       	std	Y+11, r31	; 0x0b
  de:	ea 87       	std	Y+10, r30	; 0x0a
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	fc 87       	std	Y+12, r31	; 0x0c
  e4:	ea 85       	ldd	r30, Y+10	; 0x0a
  e6:	fb 85       	ldd	r31, Y+11	; 0x0b
  e8:	00 80       	ld	r0, Z
  ea:	8a 85       	ldd	r24, Y+10	; 0x0a
  ec:	9b 85       	ldd	r25, Y+11	; 0x0b
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	9b 87       	std	Y+11, r25	; 0x0b
  f2:	8a 87       	std	Y+10, r24	; 0x0a
  f4:	e8 85       	ldd	r30, Y+8	; 0x08
  f6:	f9 85       	ldd	r31, Y+9	; 0x09
  f8:	00 82       	st	Z, r0
  fa:	88 85       	ldd	r24, Y+8	; 0x08
  fc:	99 85       	ldd	r25, Y+9	; 0x09
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	99 87       	std	Y+9, r25	; 0x09
 102:	88 87       	std	Y+8, r24	; 0x08
 104:	9c 85       	ldd	r25, Y+12	; 0x0c
 106:	91 50       	subi	r25, 0x01	; 1
 108:	9c 87       	std	Y+12, r25	; 0x0c
 10a:	ec 85       	ldd	r30, Y+12	; 0x0c
 10c:	ee 23       	and	r30, r30
 10e:	51 f7       	brne	.-44     	; 0xe4 <main+0x52>
	Timer_init(&Config_Ptr);
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	0e 94 1d 02 	call	0x43a	; 0x43a <Timer_init>

	Timer_setCallBack(toggle_led);
 118:	81 e9       	ldi	r24, 0x91	; 145
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 c2 03 	call	0x784	; 0x784 <Timer_setCallBack>
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x8e>

00000122 <toggle_led>:
	}

}

void toggle_led()
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
 12a:	80 91 68 00 	lds	r24, 0x0068
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 68 00 	sts	0x0068, r24
	if(g_tick == 3)
 134:	80 91 68 00 	lds	r24, 0x0068
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	49 f4       	brne	.+18     	; 0x14e <toggle_led+0x2c>
	{
		PORTC_OUT ^= (1<<P0);
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	89 27       	eor	r24, r25
 14a:	8c 93       	st	X, r24
 14c:	0e c0       	rjmp	.+28     	; 0x16a <toggle_led+0x48>
	}
	else if(g_tick == 5)
 14e:	80 91 68 00 	lds	r24, 0x0068
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	51 f4       	brne	.+20     	; 0x16a <toggle_led+0x48>
	{
		PORTC_OUT ^= (1<<P0);
 156:	a5 e3       	ldi	r26, 0x35	; 53
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e5 e3       	ldi	r30, 0x35	; 53
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	89 27       	eor	r24, r25
 164:	8c 93       	st	X, r24
		g_tick = 0;
 166:	10 92 68 00 	sts	0x0068, r1
	}

}
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0callBackPtr != NULL_PTR)
 19a:	80 91 69 00 	lds	r24, 0x0069
 19e:	90 91 6a 00 	lds	r25, 0x006A
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	29 f0       	breq	.+10     	; 0x1b0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer0callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 1a6:	e0 91 69 00 	lds	r30, 0x0069
 1aa:	f0 91 6a 00 	lds	r31, 0x006A
 1ae:	09 95       	icall
	}
}
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0callBackPtr != NULL_PTR)
 200:	80 91 69 00 	lds	r24, 0x0069
 204:	90 91 6a 00 	lds	r25, 0x006A
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	29 f0       	breq	.+10     	; 0x216 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer0callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 20c:	e0 91 69 00 	lds	r30, 0x0069
 210:	f0 91 6a 00 	lds	r31, 0x006A
 214:	09 95       	icall
	}
}
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_8>:


ISR(TIMER1_OVF_vect)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62

	if(g_Timer1callBackPtr != NULL_PTR)
 266:	80 91 6b 00 	lds	r24, 0x006B
 26a:	90 91 6c 00 	lds	r25, 0x006C
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	29 f0       	breq	.+10     	; 0x27c <__vector_8+0x40>
	{

		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 272:	e0 91 6b 00 	lds	r30, 0x006B
 276:	f0 91 6c 00 	lds	r31, 0x006C
 27a:	09 95       	icall
	}
}
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1callBackPtr != NULL_PTR)
 2cc:	80 91 6b 00 	lds	r24, 0x006B
 2d0:	90 91 6c 00 	lds	r25, 0x006C
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	29 f0       	breq	.+10     	; 0x2e2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 2d8:	e0 91 6b 00 	lds	r30, 0x006B
 2dc:	f0 91 6c 00 	lds	r31, 0x006C
 2e0:	09 95       	icall
	}
}
 2e2:	cf 91       	pop	r28
 2e4:	df 91       	pop	r29
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_7>:


ISR(TIMER1_COMPB_vect)
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1callBackPtr != NULL_PTR)
 332:	80 91 6b 00 	lds	r24, 0x006B
 336:	90 91 6c 00 	lds	r25, 0x006C
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	29 f0       	breq	.+10     	; 0x348 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer1callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
 33e:	e0 91 6b 00 	lds	r30, 0x006B
 342:	f0 91 6c 00 	lds	r31, 0x006C
 346:	09 95       	icall
	}
}
 348:	cf 91       	pop	r28
 34a:	df 91       	pop	r29
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_4>:


ISR(TIMER2_OVF_vect)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2callBackPtr != NULL_PTR)
 398:	80 91 6d 00 	lds	r24, 0x006D
 39c:	90 91 6e 00 	lds	r25, 0x006E
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	29 f0       	breq	.+10     	; 0x3ae <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the overflow is detected */
		(*g_Timer2callBackPtr)(); /* another method to call the function using pointer to function g_Timer2callBackPtr(); */
 3a4:	e0 91 6d 00 	lds	r30, 0x006D
 3a8:	f0 91 6e 00 	lds	r31, 0x006E
 3ac:	09 95       	icall
	}
}
 3ae:	cf 91       	pop	r28
 3b0:	df 91       	pop	r29
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	df 93       	push	r29
 3f8:	cf 93       	push	r28
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2callBackPtr != NULL_PTR)
 3fe:	80 91 6d 00 	lds	r24, 0x006D
 402:	90 91 6e 00 	lds	r25, 0x006E
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	29 f0       	breq	.+10     	; 0x414 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the compare value is detected */
		(*g_Timer2callBackPtr)(); /* another method to call the function using pointer to function g_Timer2callBackPtr(); */
 40a:	e0 91 6d 00 	lds	r30, 0x006D
 40e:	f0 91 6e 00 	lds	r31, 0x006E
 412:	09 95       	icall
	}
}
 414:	cf 91       	pop	r28
 416:	df 91       	pop	r29
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <Timer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void Timer_init(const Timer_ConfigType * Config_Ptr)
{
 43a:	df 93       	push	r29
 43c:	cf 93       	push	r28
 43e:	00 d0       	rcall	.+0      	; 0x440 <Timer_init+0x6>
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	9a 83       	std	Y+2, r25	; 0x02
 446:	89 83       	std	Y+1, r24	; 0x01
	/* Saves timer_number in global variable */
	g_timer_number = Config_Ptr->timer_number;
 448:	e9 81       	ldd	r30, Y+1	; 0x01
 44a:	fa 81       	ldd	r31, Y+2	; 0x02
 44c:	86 81       	ldd	r24, Z+6	; 0x06
 44e:	80 93 6f 00 	sts	0x006F, r24

	/* Adjust bits of timer0 */
	if(g_timer_number == Timer0)
 452:	80 91 6f 00 	lds	r24, 0x006F
 456:	88 23       	and	r24, r24
 458:	09 f0       	breq	.+2      	; 0x45c <Timer_init+0x22>
 45a:	74 c0       	rjmp	.+232    	; 0x544 <__stack+0xe5>
	{
		/* Non PWM Mode */
		TCCR0 = (1<<FOC0);
 45c:	e3 e5       	ldi	r30, 0x53	; 83
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 e8       	ldi	r24, 0x80	; 128
 462:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT0 = Config_Ptr->initial_value;
 464:	a2 e5       	ldi	r26, 0x52	; 82
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	e9 81       	ldd	r30, Y+1	; 0x01
 46a:	fa 81       	ldd	r31, Y+2	; 0x02
 46c:	81 81       	ldd	r24, Z+1	; 0x01
 46e:	92 81       	ldd	r25, Z+2	; 0x02
 470:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
 472:	e9 81       	ldd	r30, Y+1	; 0x01
 474:	fa 81       	ldd	r31, Y+2	; 0x02
 476:	80 81       	ld	r24, Z
 478:	88 23       	and	r24, r24
 47a:	41 f4       	brne	.+16     	; 0x48c <__stack+0x2d>
		{
			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1<<TOIE0);
 47c:	a9 e5       	ldi	r26, 0x59	; 89
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	e9 e5       	ldi	r30, 0x59	; 89
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	81 60       	ori	r24, 0x01	; 1
 488:	8c 93       	st	X, r24
 48a:	1a c0       	rjmp	.+52     	; 0x4c0 <__stack+0x61>
		}
		else if(Config_Ptr->mode == COMPARE)
 48c:	e9 81       	ldd	r30, Y+1	; 0x01
 48e:	fa 81       	ldd	r31, Y+2	; 0x02
 490:	80 81       	ld	r24, Z
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	a9 f4       	brne	.+42     	; 0x4c0 <__stack+0x61>
		{
			/* CTC Mode WGM01=1 & WGM00=0 */
			TCCR0 |= (1<<WGM01);
 496:	a3 e5       	ldi	r26, 0x53	; 83
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	e3 e5       	ldi	r30, 0x53	; 83
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	88 60       	ori	r24, 0x08	; 8
 4a2:	8c 93       	st	X, r24

			/* Set Compare Value */
			OCR0 = Config_Ptr->compare_value;
 4a4:	ac e5       	ldi	r26, 0x5C	; 92
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	e9 81       	ldd	r30, Y+1	; 0x01
 4aa:	fa 81       	ldd	r31, Y+2	; 0x02
 4ac:	84 81       	ldd	r24, Z+4	; 0x04
 4ae:	95 81       	ldd	r25, Z+5	; 0x05
 4b0:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1<<OCIE0);
 4b2:	a9 e5       	ldi	r26, 0x59	; 89
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	e9 e5       	ldi	r30, 0x59	; 89
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	82 60       	ori	r24, 0x02	; 2
 4be:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
 4c0:	e9 81       	ldd	r30, Y+1	; 0x01
 4c2:	fa 81       	ldd	r31, Y+2	; 0x02
 4c4:	83 81       	ldd	r24, Z+3	; 0x03
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	41 f4       	brne	.+16     	; 0x4da <__stack+0x7b>
		{
			TCCR0 |= (1<<CS00);
 4ca:	a3 e5       	ldi	r26, 0x53	; 83
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	e3 e5       	ldi	r30, 0x53	; 83
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	8c 93       	st	X, r24
 4d8:	50 c1       	rjmp	.+672    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_8)
 4da:	e9 81       	ldd	r30, Y+1	; 0x01
 4dc:	fa 81       	ldd	r31, Y+2	; 0x02
 4de:	83 81       	ldd	r24, Z+3	; 0x03
 4e0:	82 30       	cpi	r24, 0x02	; 2
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <__stack+0x95>
		{
			TCCR0 |= (1<<CS01);
 4e4:	a3 e5       	ldi	r26, 0x53	; 83
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e3 e5       	ldi	r30, 0x53	; 83
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	82 60       	ori	r24, 0x02	; 2
 4f0:	8c 93       	st	X, r24
 4f2:	43 c1       	rjmp	.+646    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_64)
 4f4:	e9 81       	ldd	r30, Y+1	; 0x01
 4f6:	fa 81       	ldd	r31, Y+2	; 0x02
 4f8:	83 81       	ldd	r24, Z+3	; 0x03
 4fa:	84 30       	cpi	r24, 0x04	; 4
 4fc:	41 f4       	brne	.+16     	; 0x50e <__stack+0xaf>
		{
			TCCR0 |= (1<<CS00) | (1<<CS01);
 4fe:	a3 e5       	ldi	r26, 0x53	; 83
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e3 e5       	ldi	r30, 0x53	; 83
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	83 60       	ori	r24, 0x03	; 3
 50a:	8c 93       	st	X, r24
 50c:	36 c1       	rjmp	.+620    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_256)
 50e:	e9 81       	ldd	r30, Y+1	; 0x01
 510:	fa 81       	ldd	r31, Y+2	; 0x02
 512:	83 81       	ldd	r24, Z+3	; 0x03
 514:	85 30       	cpi	r24, 0x05	; 5
 516:	41 f4       	brne	.+16     	; 0x528 <__stack+0xc9>
		{
			TCCR0 |= (1<<CS02);
 518:	a3 e5       	ldi	r26, 0x53	; 83
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e3 e5       	ldi	r30, 0x53	; 83
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	84 60       	ori	r24, 0x04	; 4
 524:	8c 93       	st	X, r24
 526:	29 c1       	rjmp	.+594    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
 528:	e9 81       	ldd	r30, Y+1	; 0x01
 52a:	fa 81       	ldd	r31, Y+2	; 0x02
 52c:	83 81       	ldd	r24, Z+3	; 0x03
 52e:	86 30       	cpi	r24, 0x06	; 6
 530:	09 f0       	breq	.+2      	; 0x534 <__stack+0xd5>
 532:	23 c1       	rjmp	.+582    	; 0x77a <__stack+0x31b>
		{
			TCCR0 |= (1<<CS00) | (1<<CS02);
 534:	a3 e5       	ldi	r26, 0x53	; 83
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e3 e5       	ldi	r30, 0x53	; 83
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	85 60       	ori	r24, 0x05	; 5
 540:	8c 93       	st	X, r24
 542:	1b c1       	rjmp	.+566    	; 0x77a <__stack+0x31b>
		}
	}
	else if(g_timer_number == Timer1)
 544:	80 91 6f 00 	lds	r24, 0x006F
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	09 f0       	breq	.+2      	; 0x54e <__stack+0xef>
 54c:	92 c0       	rjmp	.+292    	; 0x672 <__stack+0x213>
	{
		/* Non PWM Mode */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
 54e:	ef e4       	ldi	r30, 0x4F	; 79
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	8c e0       	ldi	r24, 0x0C	; 12
 554:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT1 = Config_Ptr->initial_value;
 556:	ac e4       	ldi	r26, 0x4C	; 76
 558:	b0 e0       	ldi	r27, 0x00	; 0
 55a:	e9 81       	ldd	r30, Y+1	; 0x01
 55c:	fa 81       	ldd	r31, Y+2	; 0x02
 55e:	81 81       	ldd	r24, Z+1	; 0x01
 560:	92 81       	ldd	r25, Z+2	; 0x02
 562:	11 96       	adiw	r26, 0x01	; 1
 564:	9c 93       	st	X, r25
 566:	8e 93       	st	-X, r24

		if(Config_Ptr->mode == NORMAL)
 568:	e9 81       	ldd	r30, Y+1	; 0x01
 56a:	fa 81       	ldd	r31, Y+2	; 0x02
 56c:	80 81       	ld	r24, Z
 56e:	88 23       	and	r24, r24
 570:	59 f4       	brne	.+22     	; 0x588 <__stack+0x129>
		{
			TCCR1B = 0;
 572:	ee e4       	ldi	r30, 0x4E	; 78
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	10 82       	st	Z, r1

			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
 578:	a9 e5       	ldi	r26, 0x59	; 89
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	e9 e5       	ldi	r30, 0x59	; 89
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	84 60       	ori	r24, 0x04	; 4
 584:	8c 93       	st	X, r24
 586:	33 c0       	rjmp	.+102    	; 0x5ee <__stack+0x18f>
		}
		else if(Config_Ptr->mode == COMPAREA)
 588:	e9 81       	ldd	r30, Y+1	; 0x01
 58a:	fa 81       	ldd	r31, Y+2	; 0x02
 58c:	80 81       	ld	r24, Z
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	a9 f4       	brne	.+42     	; 0x5bc <__stack+0x15d>
		{
			/*  CTC Mode WGM12=1 WGM13=0 (Mode Number 4) */
			TCCR1B = (1<<WGM12);
 592:	ee e4       	ldi	r30, 0x4E	; 78
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	80 83       	st	Z, r24

			/* Set Compare Value */
			OCR1A = Config_Ptr->compare_value;
 59a:	aa e4       	ldi	r26, 0x4A	; 74
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	e9 81       	ldd	r30, Y+1	; 0x01
 5a0:	fa 81       	ldd	r31, Y+2	; 0x02
 5a2:	84 81       	ldd	r24, Z+4	; 0x04
 5a4:	95 81       	ldd	r25, Z+5	; 0x05
 5a6:	11 96       	adiw	r26, 0x01	; 1
 5a8:	9c 93       	st	X, r25
 5aa:	8e 93       	st	-X, r24

			/* Enable Timer1 Compare A Interrupt */
			TIMSK |= (1<<OCIE1A);
 5ac:	a9 e5       	ldi	r26, 0x59	; 89
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	e9 e5       	ldi	r30, 0x59	; 89
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	80 61       	ori	r24, 0x10	; 16
 5b8:	8c 93       	st	X, r24
 5ba:	19 c0       	rjmp	.+50     	; 0x5ee <__stack+0x18f>
		}
		else if(Config_Ptr->mode == COMPAREB)
 5bc:	e9 81       	ldd	r30, Y+1	; 0x01
 5be:	fa 81       	ldd	r31, Y+2	; 0x02
 5c0:	80 81       	ld	r24, Z
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	a1 f4       	brne	.+40     	; 0x5ee <__stack+0x18f>
		{
			/*  CTC Mode WGM12=1 WGM13=1 (Mode Number 12) */
			TCCR1B = (1<<WGM12) | (1<<WGM13);
 5c6:	ee e4       	ldi	r30, 0x4E	; 78
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	88 e1       	ldi	r24, 0x18	; 24
 5cc:	80 83       	st	Z, r24

			/* Set Compare Value */
			OCR1B = Config_Ptr->compare_value;
 5ce:	a8 e4       	ldi	r26, 0x48	; 72
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	e9 81       	ldd	r30, Y+1	; 0x01
 5d4:	fa 81       	ldd	r31, Y+2	; 0x02
 5d6:	84 81       	ldd	r24, Z+4	; 0x04
 5d8:	95 81       	ldd	r25, Z+5	; 0x05
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	9c 93       	st	X, r25
 5de:	8e 93       	st	-X, r24

			/* Enable Timer1 Compare B Interrupt */
			TIMSK |= (1<<OCIE1B);
 5e0:	a9 e5       	ldi	r26, 0x59	; 89
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e9 e5       	ldi	r30, 0x59	; 89
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	88 60       	ori	r24, 0x08	; 8
 5ec:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
 5ee:	e9 81       	ldd	r30, Y+1	; 0x01
 5f0:	fa 81       	ldd	r31, Y+2	; 0x02
 5f2:	83 81       	ldd	r24, Z+3	; 0x03
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	41 f4       	brne	.+16     	; 0x608 <__stack+0x1a9>
		{
			TCCR1B |= (1<<CS10);
 5f8:	ae e4       	ldi	r26, 0x4E	; 78
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	ee e4       	ldi	r30, 0x4E	; 78
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	81 60       	ori	r24, 0x01	; 1
 604:	8c 93       	st	X, r24
 606:	b9 c0       	rjmp	.+370    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_8)
 608:	e9 81       	ldd	r30, Y+1	; 0x01
 60a:	fa 81       	ldd	r31, Y+2	; 0x02
 60c:	83 81       	ldd	r24, Z+3	; 0x03
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	41 f4       	brne	.+16     	; 0x622 <__stack+0x1c3>
		{
			TCCR1B |= (1<<CS11);
 612:	ae e4       	ldi	r26, 0x4E	; 78
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	ee e4       	ldi	r30, 0x4E	; 78
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	8c 93       	st	X, r24
 620:	ac c0       	rjmp	.+344    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_64)
 622:	e9 81       	ldd	r30, Y+1	; 0x01
 624:	fa 81       	ldd	r31, Y+2	; 0x02
 626:	83 81       	ldd	r24, Z+3	; 0x03
 628:	84 30       	cpi	r24, 0x04	; 4
 62a:	41 f4       	brne	.+16     	; 0x63c <__stack+0x1dd>
		{
			TCCR1B |= (1<<CS10) | (1<<CS11);
 62c:	ae e4       	ldi	r26, 0x4E	; 78
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	ee e4       	ldi	r30, 0x4E	; 78
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	83 60       	ori	r24, 0x03	; 3
 638:	8c 93       	st	X, r24
 63a:	9f c0       	rjmp	.+318    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_256)
 63c:	e9 81       	ldd	r30, Y+1	; 0x01
 63e:	fa 81       	ldd	r31, Y+2	; 0x02
 640:	83 81       	ldd	r24, Z+3	; 0x03
 642:	85 30       	cpi	r24, 0x05	; 5
 644:	41 f4       	brne	.+16     	; 0x656 <__stack+0x1f7>
		{
			TCCR1B |= (1<<CS12);
 646:	ae e4       	ldi	r26, 0x4E	; 78
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	ee e4       	ldi	r30, 0x4E	; 78
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	84 60       	ori	r24, 0x04	; 4
 652:	8c 93       	st	X, r24
 654:	92 c0       	rjmp	.+292    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
 656:	e9 81       	ldd	r30, Y+1	; 0x01
 658:	fa 81       	ldd	r31, Y+2	; 0x02
 65a:	83 81       	ldd	r24, Z+3	; 0x03
 65c:	86 30       	cpi	r24, 0x06	; 6
 65e:	09 f0       	breq	.+2      	; 0x662 <__stack+0x203>
 660:	8c c0       	rjmp	.+280    	; 0x77a <__stack+0x31b>
		{
			TCCR1B |= (1<<CS10) | (1<<CS12);
 662:	ae e4       	ldi	r26, 0x4E	; 78
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	ee e4       	ldi	r30, 0x4E	; 78
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	85 60       	ori	r24, 0x05	; 5
 66e:	8c 93       	st	X, r24
 670:	84 c0       	rjmp	.+264    	; 0x77a <__stack+0x31b>
		}

	}
	else if(g_timer_number == Timer2)
 672:	80 91 6f 00 	lds	r24, 0x006F
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	09 f0       	breq	.+2      	; 0x67c <__stack+0x21d>
 67a:	7f c0       	rjmp	.+254    	; 0x77a <__stack+0x31b>
	{
		/* Non PWM Mode */
		TCCR2 = (1<<FOC2);
 67c:	e5 e4       	ldi	r30, 0x45	; 69
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 e8       	ldi	r24, 0x80	; 128
 682:	80 83       	st	Z, r24

		/* Set Timer initial value */
		TCNT2 = Config_Ptr->initial_value;
 684:	a4 e4       	ldi	r26, 0x44	; 68
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	e9 81       	ldd	r30, Y+1	; 0x01
 68a:	fa 81       	ldd	r31, Y+2	; 0x02
 68c:	81 81       	ldd	r24, Z+1	; 0x01
 68e:	92 81       	ldd	r25, Z+2	; 0x02
 690:	8c 93       	st	X, r24

		if(Config_Ptr->mode == NORMAL)
 692:	e9 81       	ldd	r30, Y+1	; 0x01
 694:	fa 81       	ldd	r31, Y+2	; 0x02
 696:	80 81       	ld	r24, Z
 698:	88 23       	and	r24, r24
 69a:	41 f4       	brne	.+16     	; 0x6ac <__stack+0x24d>
		{
			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1<<TOIE2);
 69c:	a9 e5       	ldi	r26, 0x59	; 89
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	e9 e5       	ldi	r30, 0x59	; 89
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	80 64       	ori	r24, 0x40	; 64
 6a8:	8c 93       	st	X, r24
 6aa:	1a c0       	rjmp	.+52     	; 0x6e0 <__stack+0x281>
		}
		else if(Config_Ptr->mode == COMPARE)
 6ac:	e9 81       	ldd	r30, Y+1	; 0x01
 6ae:	fa 81       	ldd	r31, Y+2	; 0x02
 6b0:	80 81       	ld	r24, Z
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	a9 f4       	brne	.+42     	; 0x6e0 <__stack+0x281>
		{
			/* CTC Mode WGM21=1 & WGM20=0 */
			TCCR2 |= (1<<WGM21);
 6b6:	a5 e4       	ldi	r26, 0x45	; 69
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e5 e4       	ldi	r30, 0x45	; 69
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	8c 93       	st	X, r24

			/* Set Timer compare value */
			OCR2 = Config_Ptr->compare_value;
 6c4:	a3 e4       	ldi	r26, 0x43	; 67
 6c6:	b0 e0       	ldi	r27, 0x00	; 0
 6c8:	e9 81       	ldd	r30, Y+1	; 0x01
 6ca:	fa 81       	ldd	r31, Y+2	; 0x02
 6cc:	84 81       	ldd	r24, Z+4	; 0x04
 6ce:	95 81       	ldd	r25, Z+5	; 0x05
 6d0:	8c 93       	st	X, r24

			/* Enable Timer0 COMPARE Interrupt */
			TIMSK |= (1<<OCIE2);
 6d2:	a9 e5       	ldi	r26, 0x59	; 89
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	e9 e5       	ldi	r30, 0x59	; 89
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	80 68       	ori	r24, 0x80	; 128
 6de:	8c 93       	st	X, r24
		}

		/* adjust clock mode */
		if(Config_Ptr->clock == F_CPU_CLOCK)
 6e0:	e9 81       	ldd	r30, Y+1	; 0x01
 6e2:	fa 81       	ldd	r31, Y+2	; 0x02
 6e4:	83 81       	ldd	r24, Z+3	; 0x03
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	41 f4       	brne	.+16     	; 0x6fa <__stack+0x29b>
		{
			TCCR2 |= (1<<CS20);
 6ea:	a5 e4       	ldi	r26, 0x45	; 69
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e5 e4       	ldi	r30, 0x45	; 69
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	81 60       	ori	r24, 0x01	; 1
 6f6:	8c 93       	st	X, r24
 6f8:	40 c0       	rjmp	.+128    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_8)
 6fa:	e9 81       	ldd	r30, Y+1	; 0x01
 6fc:	fa 81       	ldd	r31, Y+2	; 0x02
 6fe:	83 81       	ldd	r24, Z+3	; 0x03
 700:	82 30       	cpi	r24, 0x02	; 2
 702:	41 f4       	brne	.+16     	; 0x714 <__stack+0x2b5>
		{
			TCCR2 |= (1<<CS21);
 704:	a5 e4       	ldi	r26, 0x45	; 69
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e5 e4       	ldi	r30, 0x45	; 69
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	8c 93       	st	X, r24
 712:	33 c0       	rjmp	.+102    	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_32)
 714:	e9 81       	ldd	r30, Y+1	; 0x01
 716:	fa 81       	ldd	r31, Y+2	; 0x02
 718:	83 81       	ldd	r24, Z+3	; 0x03
 71a:	83 30       	cpi	r24, 0x03	; 3
 71c:	41 f4       	brne	.+16     	; 0x72e <__stack+0x2cf>
		{
			TCCR2 |= (1<<CS20) | (1<<CS21);
 71e:	a5 e4       	ldi	r26, 0x45	; 69
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e5 e4       	ldi	r30, 0x45	; 69
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	83 60       	ori	r24, 0x03	; 3
 72a:	8c 93       	st	X, r24
 72c:	26 c0       	rjmp	.+76     	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_64)
 72e:	e9 81       	ldd	r30, Y+1	; 0x01
 730:	fa 81       	ldd	r31, Y+2	; 0x02
 732:	83 81       	ldd	r24, Z+3	; 0x03
 734:	84 30       	cpi	r24, 0x04	; 4
 736:	41 f4       	brne	.+16     	; 0x748 <__stack+0x2e9>
		{
			TCCR2 |= (1<<CS22);
 738:	a5 e4       	ldi	r26, 0x45	; 69
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	e5 e4       	ldi	r30, 0x45	; 69
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	84 60       	ori	r24, 0x04	; 4
 744:	8c 93       	st	X, r24
 746:	19 c0       	rjmp	.+50     	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_256)
 748:	e9 81       	ldd	r30, Y+1	; 0x01
 74a:	fa 81       	ldd	r31, Y+2	; 0x02
 74c:	83 81       	ldd	r24, Z+3	; 0x03
 74e:	85 30       	cpi	r24, 0x05	; 5
 750:	41 f4       	brne	.+16     	; 0x762 <__stack+0x303>
		{
			TCCR2 |= (1<<CS21) | (1<<CS22);
 752:	a5 e4       	ldi	r26, 0x45	; 69
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	e5 e4       	ldi	r30, 0x45	; 69
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	86 60       	ori	r24, 0x06	; 6
 75e:	8c 93       	st	X, r24
 760:	0c c0       	rjmp	.+24     	; 0x77a <__stack+0x31b>
		}
		else if(Config_Ptr->clock == F_CPU_1024)
 762:	e9 81       	ldd	r30, Y+1	; 0x01
 764:	fa 81       	ldd	r31, Y+2	; 0x02
 766:	83 81       	ldd	r24, Z+3	; 0x03
 768:	86 30       	cpi	r24, 0x06	; 6
 76a:	39 f4       	brne	.+14     	; 0x77a <__stack+0x31b>
		{
			TCCR2 |= (1<<CS20) | (1<<CS21) | (1<<CS22);
 76c:	a5 e4       	ldi	r26, 0x45	; 69
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	e5 e4       	ldi	r30, 0x45	; 69
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	87 60       	ori	r24, 0x07	; 7
 778:	8c 93       	st	X, r24
		}

	}


}
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void))
{
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	00 d0       	rcall	.+0      	; 0x78a <Timer_setCallBack+0x6>
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	9a 83       	std	Y+2, r25	; 0x02
 790:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	if(g_timer_number == Timer0)
 792:	80 91 6f 00 	lds	r24, 0x006F
 796:	88 23       	and	r24, r24
 798:	39 f4       	brne	.+14     	; 0x7a8 <Timer_setCallBack+0x24>
	{
		g_Timer0callBackPtr = a_ptr;
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	9a 81       	ldd	r25, Y+2	; 0x02
 79e:	90 93 6a 00 	sts	0x006A, r25
 7a2:	80 93 69 00 	sts	0x0069, r24
 7a6:	15 c0       	rjmp	.+42     	; 0x7d2 <Timer_setCallBack+0x4e>
	}
	else if(g_timer_number == Timer1)
 7a8:	80 91 6f 00 	lds	r24, 0x006F
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	39 f4       	brne	.+14     	; 0x7be <Timer_setCallBack+0x3a>
	{
		g_Timer1callBackPtr = a_ptr;
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	9a 81       	ldd	r25, Y+2	; 0x02
 7b4:	90 93 6c 00 	sts	0x006C, r25
 7b8:	80 93 6b 00 	sts	0x006B, r24
 7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <Timer_setCallBack+0x4e>
	}
	else if(g_timer_number == Timer2)
 7be:	80 91 6f 00 	lds	r24, 0x006F
 7c2:	82 30       	cpi	r24, 0x02	; 2
 7c4:	31 f4       	brne	.+12     	; 0x7d2 <Timer_setCallBack+0x4e>
	{
		g_Timer2callBackPtr = a_ptr;
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ca:	90 93 6e 00 	sts	0x006E, r25
 7ce:	80 93 6d 00 	sts	0x006D, r24
	}

}
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	08 95       	ret

000007dc <Timer_stop>:
/*
 * Description: Function to stop the timer.
 */

void Timer_stop(uint8 a_timer_number)
{
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	0f 92       	push	r0
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	89 83       	std	Y+1, r24	; 0x01
	if(a_timer_number == Timer0)
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	88 23       	and	r24, r24
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <Timer_stop+0x1a>
	{
		TCCR0 = 0;
 7ee:	e3 e5       	ldi	r30, 0x53	; 83
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	10 82       	st	Z, r1
 7f4:	0d c0       	rjmp	.+26     	; 0x810 <Timer_stop+0x34>
	}
	else if(a_timer_number == Timer1)
 7f6:	89 81       	ldd	r24, Y+1	; 0x01
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	21 f4       	brne	.+8      	; 0x804 <Timer_stop+0x28>
	{
		TCCR1B = 0;
 7fc:	ee e4       	ldi	r30, 0x4E	; 78
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	10 82       	st	Z, r1
 802:	06 c0       	rjmp	.+12     	; 0x810 <Timer_stop+0x34>
	}
	else if(a_timer_number == Timer2)
 804:	89 81       	ldd	r24, Y+1	; 0x01
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	19 f4       	brne	.+6      	; 0x810 <Timer_stop+0x34>
	{
		TCCR2 = 0;
 80a:	e5 e4       	ldi	r30, 0x45	; 69
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	10 82       	st	Z, r1
	}

}
 810:	0f 90       	pop	r0
 812:	cf 91       	pop	r28
 814:	df 91       	pop	r29
 816:	08 95       	ret

00000818 <_exit>:
 818:	f8 94       	cli

0000081a <__stop_program>:
 81a:	ff cf       	rjmp	.-2      	; 0x81a <__stop_program>
