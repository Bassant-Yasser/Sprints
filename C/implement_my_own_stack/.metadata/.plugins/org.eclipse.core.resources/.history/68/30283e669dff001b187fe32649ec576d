#include <stdio.h>
#include <stdlib.h>

typedef unsigned char   uint8_t;

void push(uint8_t u8_data);
void pull();
uint8_t top();
void printStack();
int is_empty();

struct stack{
	char array[1000];
	int size;
}stack1;

int main(void) {
	int n = 0, flag;
		char brackets[100];

		scanf("%d", &n);
		for(int i = 0; i < n; i++)
		{
			flag = 0;
			//cin >> brackets;
			scanf("%s", brackets);
			while (is_empty() == 0)
			{
				pull();
			}

			for(int j = 0; j < strlen(brackets) ; j++)
			{
				if(brackets[j] == '{' || brackets[j] == '(' || brackets[j] == '[' || brackets[j] == '<')
				{
					push(brackets[j]);
				}
				else if(is_empty() == 0)
				{
					if((top() == '(' && brackets[j] == ')') || (top() == '{' && brackets[j] == '}') || (top() == '[' && brackets[j] == ']')
							|| (top() == '<' && brackets[j] == '>'))
					{
						pull();

					}
					else
					{
						//cout << "NO" << endl;
						printf("NO \n");
						flag = 1;
						break;
					}
				}
				else  // if stack is empty
				{
					//cout << "NO" << endl;
					printf("NO \n");
					flag = 1;
					break;
				}
			}
			if(!flag)
			{
				//cout << "YES" << endl;
				printf("YES \n");
			}

		}
}


void push(uint8_t u8_data)
{
	if(stack1.size < 1000)
	{
		stack1.array[stack1.size] = u8_data;
		stack1.size++;
	}

}

void pull()
{
//	if(stack1.size > 0)
//	{
//		return(stack1.array[stack1.size--]);
//	}
	//return(stack1.array[stack1.size--]);
	stack1.size--;
}

uint8_t top()
{
//	if(stack1.size > 0)
//	{
//		return(stack1.array[stack1.size]);
//	}
	return(stack1.array[stack1.size]);

}

void printStack()
{
	int size = stack1.size;
	while(size)
	{
		printf("%d \n", stack1.array[size]);
		size--;
	}
}

int is_empty()
{
	if(stack1.size == 0)
		return 1;       //means empty
	else
		return 0;
}
