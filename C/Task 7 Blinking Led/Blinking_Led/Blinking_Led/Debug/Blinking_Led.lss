
Blinking_Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003e4  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006a9  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer0_init_normal_mode>:
 * For clock=1Mhz and prescale F_CPU/1024 every count will take 1ms
 * so put initial timer counter = 0  0 --> 255 (256ms per overflow)
 * so we need timer to overflow 2 times to get a 0.5 second
 */
void timer0_init_normal_mode(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 256-100; //Set Timer initial value to 0
  74:	e2 e5       	ldi	r30, 0x52	; 82
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8c e9       	ldi	r24, 0x9C	; 156
  7a:	80 83       	st	Z, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
  7c:	e3 e5       	ldi	r30, 0x53	; 83
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	85 e8       	ldi	r24, 0x85	; 133
  82:	80 83       	st	Z, r24
}
  84:	cf 91       	pop	r28
  86:	df 91       	pop	r29
  88:	08 95       	ret

0000008a <main>:

int main()
{
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	0f 92       	push	r0
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	timer0_init_normal_mode();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <timer0_init_normal_mode>
	uint8_t g_tick = 0;
  98:	19 82       	std	Y+1, r1	; 0x01
	DDRC |= (1<<PC0);
  9a:	a4 e3       	ldi	r26, 0x34	; 52
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC0);
  a8:	a5 e3       	ldi	r26, 0x35	; 53
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e5 e3       	ldi	r30, 0x35	; 53
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	8c 93       	st	X, r24
	while(1)
	{
		while((TIFR & (1<<TOV0)) == 0);
  b6:	e8 e5       	ldi	r30, 0x58	; 88
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	b9 f3       	breq	.-18     	; 0xb6 <main+0x2c>
		TIFR |= (1<<TOV0);
  c8:	a8 e5       	ldi	r26, 0x58	; 88
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e8 e5       	ldi	r30, 0x58	; 88
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8c 93       	st	X, r24
		g_tick++;
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	89 83       	std	Y+1, r24	; 0x01
		if(g_tick == 3)
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	41 f4       	brne	.+16     	; 0xf2 <main+0x68>
		{
			PORTC &= ~(1<<PC0);
  e2:	a5 e3       	ldi	r26, 0x35	; 53
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e5 e3       	ldi	r30, 0x35	; 53
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8c 93       	st	X, r24
  f0:	0b c0       	rjmp	.+22     	; 0x108 <main+0x7e>
		}
		else if(g_tick == 5)
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	41 f4       	brne	.+16     	; 0x108 <main+0x7e>
		{
			PORTC = PORTC | (1<<PC0);
  f8:	a5 e3       	ldi	r26, 0x35	; 53
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e5 e3       	ldi	r30, 0x35	; 53
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	8c 93       	st	X, r24
			g_tick = 0;
 106:	19 82       	std	Y+1, r1	; 0x01
		}
		TCNT0 = 256-100;
 108:	e2 e5       	ldi	r30, 0x52	; 82
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	8c e9       	ldi	r24, 0x9C	; 156
 10e:	80 83       	st	Z, r24
 110:	d2 cf       	rjmp	.-92     	; 0xb6 <main+0x2c>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
